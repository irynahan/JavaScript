{
	"info": {
		"_postman_id": "9f0505b2-1d70-4119-86a4-af85507f1b53",
		"name": "Simple Grocery Store API",
		"description": "[https://github.com/vdespa/Postman-Complete-Guide-API-Testing/blob/main/simple-grocery-store-api.md](https://github.com/vdespa/Postman-Complete-Guide-API-Testing/blob/main/simple-grocery-store-api.md)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19082248"
	},
	"item": [
		{
			"name": "Positve Cases",
			"item": [
				{
					"name": "API Status",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.clear();\r",
									"console.log('Before the request');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Status is UP', function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"UP\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register API Client",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"});\r",
									"// get token from response\r",
									"const accessToken = pm.response.json().accessToken;\r",
									"console.log(accessToken);\r",
									"\r",
									"// set an environmental variable\r",
									"pm.environment.set(\"accessToken\", accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "access",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"clientName\": \"Postman client Maxims Muster\",\r\n   \"clientEmail\": \"maxims_muster@example.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api-clients"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{lastOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"});\r",
									"\r",
									"const resp = pm.response.json();\r",
									"pm.test(\"Order was created\", () => {\r",
									"    pm.expect(resp).to.have.an('object');\r",
									"    pm.expect(resp).to.haveOwnProperty('created');\r",
									"    pm.expect(resp).to.haveOwnProperty('orderId');\r",
									"    pm.expect(resp.created).to.be.true;\r",
									"    pm.expect(resp.orderId).to.be.a('string');\r",
									"    pm.environment.set('lastOrderId', resp.orderId);\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Is Order Created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"const resp = pm.response.json();\r",
									"\r",
									"// to retrieve type of variable\r",
									"console.log(typeof resp);\r",
									"\r",
									"pm.test(\"Created order is in the list\", () => {\r",
									"    let lastOrderId = pm.variables.get(\"lastOrderId\");\r",
									"    let isOrderIdInResponse = false;\r",
									"    for (let i = 0; i < resp.length; i++){\r",
									"        if (resp[i].id === lastOrderId){\r",
									"        isOrderIdInResponse = true}\r",
									"    }\r",
									"    pm.expect(isOrderIdInResponse).to.be.true;\r",
									"})\r",
									"\r",
									"// the same but forEach \r",
									"pm.test(\"Created order is in the list2\", () => {\r",
									"    let lastOrderId = pm.variables.get(\"lastOrderId\");\r",
									"    let isOrderIdInResponse = false;\r",
									"    resp.forEach((order) => {\r",
									"        if (order.id === lastOrderId){\r",
									"        isOrderIdInResponse = true}\r",
									"    });\r",
									"    pm.expect(isOrderIdInResponse).to.be.true;\r",
									"})\r",
									"\r",
									"// the same but with array.find functon\r",
									"pm.test(\"Created order is in the list3\", () => {\r",
									"    let lastOrderId = pm.variables.get(\"lastOrderId\");\r",
									"\r",
									"    let isOrderIdInResponse = false;\r",
									"    const order = resp.find((orderObj) => orderObj.id === lastOrderId);\r",
									"    console.log(order);\r",
									"    pm.expect(order).to.be.an('object');\r",
									"})\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Anna Moroz\",\r\n    \"comment\": \"Client name was changed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{lastOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"customerName\": \"Anna Moroz\",\r\n    \"comment\": \"Client name was changed\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{lastOrderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('At list one product ID exists', () => {\r",
									"    const resp = pm.response.json();\r",
									"\r",
									"    // to set a property we have to be sure, that it has a value\r",
									"\r",
									"    pm.expect(resp).to.be.an('array');\r",
									"    pm.expect(resp.length).to.be.above(0);\r",
									"\r",
									"    const product = resp[0];\r",
									"\r",
									"    pm.expect(product).to.be.an('object');\r",
									"    pm.expect(product).to.haveOwnProperty('id');\r",
									"    pm.expect(product.id).to.be.a('number');\r",
									"    pm.expect(product).haveOwnProperty('inStock');\r",
									"    pm.expect(product.inStock).is.true;\r",
									"    pm.environment.set('productId', resp[0].id);\r",
									"})\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=coffee&results=20&available=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "20"
								},
								{
									"key": "available",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"} )\r",
									"\r",
									"const resp = pm.response.json();\r",
									"\r",
									"pm.test(\"Check product name\", () => {\r",
									"    pm.expect(resp.name).to.equal('Starbucks Coffee Variety Pack, 100% Arabica');\r",
									"})\r",
									"\r",
									"pm.test(\"Check price\", () => {\r",
									"    pm.expect(resp.price).to.be.a('number');\r",
									"    pm.expect(resp.price).to.be.above(0);\r",
									"})\r",
									"\r",
									"pm.test(\"Check product is in stock\", () => {\r",
									"    pm.expect(resp.inStock).to.be.true;\r",
									"})\r",
									"\r",
									"//get a postman variable from script\r",
									"\r",
									"\r",
									"pm.test('Correct product were retrieved', () => {\r",
									"    const requestedProductId = pm.variables.get('productId')\r",
									"    pm.expect(resp.id).equal(requestedProductId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/:productId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								":productId"
							],
							"variable": [
								{
									"key": "productId",
									"value": "{{productId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const resp = pm.response.json();\r",
									"\r",
									"pm.test('Response has valid cartId',() => {\r",
									"\r",
									"    pm.expect(resp).to.be.an('object');\r",
									"    pm.expect(resp).haveOwnProperty('cartId');\r",
									"    pm.expect(resp.cartId).to.be.string;\r",
									"    // pm.expect(resp.cartId).to.be.a('string');\r",
									"    pm.environment.set('cartId', resp.cartId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee",
									"disabled": true
								},
								{
									"key": "results",
									"value": "%23",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cart Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Item To Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const resp = pm.response.json();\r",
									"\r",
									"pm.test(\"Is itemID a number\", () => {\r",
									"    pm.expect(resp).to.be.an('object');\r",
									"    pm.expect(resp).to.haveOwnProperty('itemId');\r",
									"    pm.expect(resp).to.haveOwnProperty('created');\r",
									"    pm.expect(resp.created).to.be.true;\r",
									"    pm.expect(resp.itemId).to.be.a('number');\r",
									"    pm.environment.set('lastAddedItemId', resp.itemId);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n     \"productId\": {{productId}},\r\n     \"quantity\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Items Quantity in Cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// math.random [0:1)\r",
									"function getRandomNumber (minValue, maxValue) {\r",
									"    return Math.floor(Math.random()* (maxValue - minValue) + minValue);\r",
									"}\r",
									"\r",
									"pm.environment.set('randomProductQuantity', getRandomNumber(1, 12));\r",
									"\r",
									"console.log(getRandomNumber(1, 12));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": {{randomProductQuantity}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Replays Product in Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 204', () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"quantity\": 10,\r\n    \"productId\": 1225\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item In Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", () => {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carts/:cartId/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carts",
								":cartId",
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{lastAddedItemId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Cases - Authorisation",
			"item": [
				{
					"name": "Missin Autorisation",
					"item": [
						{
							"name": "Create Order - Missing Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Orders - Missing Authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const resp = pm.response.json();",
									"",
									"pm.test(\"Check error message\", () => {",
									"    pm.expect(resp.error).to.equal(\"Missing Authorization header.\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Invalid Token",
					"item": [
						{
							"name": "Create Order - Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "dd2187826948e86574f81b04aa9c1bffd964bef6bbdca9bb270de86a94c400fy",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cartId\": \"{{cartId}}\",\r\n    \"customerName\": \"{{$randomFullName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get All Orders - Invalid Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "dd2187826948e86574f81b04aa9c1bffd964bef6bbdca9bb270de86a94c400fy",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"orders"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const resp = pm.response.json();",
									"",
									"pm.test(\"Check error message\", () => {",
									"    pm.expect(resp.error).to.equal(\"Invalid bearer token.\");",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"",
							"pm.test(\"Status code is 401\", () => {",
							"    pm.response.to.have.status(401);",
							"",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Invalid inputs",
			"item": [
				{
					"name": "All Products - Invalid Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resp = pm.response.json();\r",
									"pm.test(\"Error message\", () => {\r",
									"    pm.expect(resp.error).to.have.string(\"Invalid value for query parameter 'category'.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=invalid&results=20&available=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "invalid"
								},
								{
									"key": "results",
									"value": "20"
								},
								{
									"key": "available",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Products - Invalid Result>max",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resp = pm.response.json();\r",
									"pm.test(\"Error message\", () => {\r",
									"    pm.expect(resp.error).to.have.string(\"Invalid value for query parameter 'results'. Cannot be greater than 20.\");\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=coffee&results=21&available=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "21"
								},
								{
									"key": "available",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Products - Invalid Result<min",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resp = pm.response.json();\r",
									"pm.test(\"Error message\", () => {\r",
									"    pm.expect(resp.error).to.contain(\"Invalid value for query parameter 'results'. Must be greater than 0.\");\r",
									"    // to.have.string(\"Str\")\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=coffee&results=-1&available=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "-1"
								},
								{
									"key": "available",
									"value": "false"
								}
							]
						},
						"description": "Parameter is set lower than allowed"
					},
					"response": []
				},
				{
					"name": "All Products - Invalid Result = 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.environment.name === \"Test Env - Simple Grocery Store API\") {\r",
									"const resp = pm.response.json();\r",
									"pm.test(\"Error message\", () => {\r",
									"    pm.expect(resp.error).to.contain(\"Invalid value for query parameter 'results'. Must be greater than 0.\");\r",
									"    // to.have.string(\"Str\")\r",
									"})\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?category=coffee&results=0&available=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "category",
									"value": "coffee"
								},
								{
									"key": "results",
									"value": "0"
								},
								{
									"key": "available",
									"value": "false"
								}
							]
						},
						"description": "Parameter is set lower than allowed"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Check Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative Cases - Get Order",
			"item": [
				{
					"name": "Get Single Order - Invalid OrderID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"\r",
									"});\r",
									"\r",
									"const resp = pm.response.json();\r",
									"\r",
									"// to retrieve type of variable\r",
									"console.log(typeof resp);\r",
									"\r",
									"const requestVarProductId = pm.collectionVariables.get('lastOrderId');\r",
									"pm.test('Response contain an error message', () => {\r",
									"    pm.expect(resp).haveOwnProperty('error');   \r",
									"    pm.expect(resp.error).to.contain(requestVarProductId)\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{lastOrderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Script Examples",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const persons = [\r",
							"{\r",
							"    name:'Jake',\r",
							"    email: 'jake.p@example.com'\r",
							"},\r",
							"\r",
							"{\r",
							"    name:'Mary',\r",
							"    email: 'mary.p@example.com'\r",
							"},\r",
							"\r",
							"{\r",
							"    name:'Vova',\r",
							"    email: 'vova.p@example.com'\r",
							"}\r",
							"];\r",
							"\r",
							"const personMary = persons.find((person) => person.name === \"Mary\");\r",
							"console.log (personMary.email);\r",
							"\r",
							"pm.environment.set(\"firstNAme\", \"Mia\");\r",
							"pm.environment.set(\"lastName\", \"Ende\");\r",
							"\r",
							"pm.environment.unset(\"firstNAme\", \"Mia\");\r",
							"pm.environment.unset(\"lastName\", \"Ende\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"status"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "",
			"type": "string"
		}
	]
}